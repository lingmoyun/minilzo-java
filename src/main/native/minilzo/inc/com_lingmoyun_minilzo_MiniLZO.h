/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jni.h"
/* Header for class com_lingmoyun_minilzo_MiniLZO */

/* First let's include "minizo.h". */
#include "minilzo.h"

#include <stdlib.h>

/* Work-memory needed for compression. Allocate memory in units
 * of 'lzo_align_t' (instead of 'char') to make sure it is properly aligned.
 */

#define HEAP_ALLOC(var,size) \
    lzo_align_t __LZO_MMODEL var [ ((size) + (sizeof(lzo_align_t) - 1)) / sizeof(lzo_align_t) ]

static HEAP_ALLOC(wrkmem, LZO1X_1_MEM_COMPRESS);

#ifndef _Included_com_lingmoyun_minilzo_MiniLZO
#define _Included_com_lingmoyun_minilzo_MiniLZO
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_lingmoyun_minilzo_MiniLZO
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_lingmoyun_minilzo_MiniLZO_init
  (JNIEnv *, jclass);

/*
 * Class:     com_lingmoyun_minilzo_MiniLZO
 * Method:    compress
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_lingmoyun_minilzo_MiniLZO_compress
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     com_lingmoyun_minilzo_MiniLZO
 * Method:    decompress
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_lingmoyun_minilzo_MiniLZO_decompress
  (JNIEnv *, jclass, jbyteArray);

#ifdef __cplusplus
}
#endif
#endif
